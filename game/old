var gameconsole = document.getElementById('console');var gamescreen = document.getElementById('gamescreen');var roomarea = document.getElementById('roomarea');var main = document.getElementById('main');var hover = document.getElementById('hover');roomarea.style.display = 'none';var scripts = {    running : {}};var rooms = {};var game = {    interfaceLocked:false};var globals = {    rooms : {},    scripts: {        running: {}    }};async function logKey(e) {    if( game.interfaceLocked ) return;    var code = e.code;    if( code.startsWith('Digit') ) {        code = code.replace('Digit','');        if (e.shiftKey) {            await SaveGame(code);        } else {            await LoadGame(code);        }    } else {        if( e.shiftKey && code == 'Escape' ) {            ClearAllSavedData();        } else if( e.shiftKey && code == 'KeyR' ) {            ResetGame();        }    }}document.addEventListener('keypress', logKey);var overHotspot;function mouseMove(e) {    if( game.interfaceLocked ) return;    var x = (e.clientX - main.offsetLeft);    var y = (e.clientY - main.offsetTop);    hover.style.left = x + "px";    hover.style.top = y + "px";    if( overHotspot) {         hover.style.display = 'block';        hover.innerHTML = overHotspot;    } else {        hover.style.display = 'none';        hover.innerHTML = '';    }    overHotspot = '';}gamescreen.addEventListener('mousemove', mouseMove);function EnableInterface() {    game.interfaceLocked = false;    gamescreen.className = gamescreen.className.replace(" nointerface", "");    hover.innerHTML = '';    hover.style.display = "none";    overHotspot = '';}function DisableInterface() {    game.interfaceLocked = true;    gamescreen.className += " nointerface";}function Random(max) {  return Math.floor(Math.random() * Math.floor(max));}function WaitMiliseconds(ms) {     return new Promise(resolve => {      setTimeout(() => {        resolve('done');      }, ms);    });  }  function WaitSeconds(s) {     return new Promise(resolve => {      setTimeout(() => {        resolve('done');      }, s*1000);    });  }  async function ClearAllSavedData() {  localStorage.removeItem('lastSave');  localStorage.removeItem('save0');  localStorage.removeItem('save1');  localStorage.removeItem('save2');  localStorage.removeItem('save3');  localStorage.removeItem('save4');  localStorage.removeItem('save5');  localStorage.removeItem('save6');  localStorage.removeItem('save7');  localStorage.removeItem('save8');  localStorage.removeItem('save9');  SetMessageColour('red');  await Say('Cleared all saved data');  DefaultMessageColour();}async function ResetGame() {  DisableInterface();  if(defaultGlobals === undefined) return;  globals = JSON.parse(defaultGlobals);  SetMessageColour('red');  await Say('Game resetting');  DefaultMessageColour();  await WaitMiliseconds(250);  EnableInterface();  StartScript('main');}  async function SaveGame(n) {    localStorage.setItem('save'+n, JSON.stringify(globals) );    SetMessageColour('yellow');    if(n==0 || n=='0') {      await Say('Autosaved');    } else {      await Say('Saved to Slot ' + n);    }    DefaultMessageColour();    localStorage.setItem('lastSave',n);}async function LoadGame(n) {   load = localStorage.getItem('save'+n);   if(load) {       newglobals = JSON.parse(load);       globals = Object.assign(globals,newglobals);       SetMessageColour('yellow');       if(n==0 || n=='0') {        await Say('Loading Autosave');        } else {        await Say('Loading Save ' + n);        }       DefaultMessageColour();       localStorage.setItem('lastSave',n);       EnterRoom( globals.currentRoom );   }}function LoadLastSave() {  var lastSave = localStorage.getItem('lastSave');  if(lastSave !=null ) {    LoadGame(lastSave);    return true;  }  else return false;}var LastCreatedRoom;function Room(name) {    LastCreatedRoom = name;    globals.rooms[name] = {        hotspots : {}    };    return rooms[name] = {        hotspots : {}    };}async function EnterRoom(name) {    hover.innerHTML = '';    hover.style.display = 'none';    roomarea.style.display = 'none';    gameconsole.innerHTML = '';    overHotspot = '';    if( rooms[name] && rooms[name].enter ) {        globals.currentRoom = name;        for(hotspot in rooms[name].hotspots) {            var hotspotdiv;            if( globals.rooms[name].hotspots[hotspot].svg ) {                hotspotdiv = document.getElementById( globals.rooms[name].hotspots[hotspot].svg );                hotspotdiv.style.cursor = "pointer";                hotspotdiv.style.display = "block";                hotspotdiv.id = hotspot;            } else {                /*hotspotdiv = document.createElement("div");                hotspotdiv.className = "game__hotspot gpu";                hotspotdiv.style.position = "absolute";                hotspotdiv.style.left = globals.rooms[name].hotspots[hotspot].x;                hotspotdiv.style.top = globals.rooms[name].hotspots[hotspot].y;                hotspotdiv.style.width = globals.rooms[name].hotspots[hotspot].width;                hotspotdiv.style.height = globals.rooms[name].hotspots[hotspot].height;                       hotspotdiv.id = hotspot;                          roomarea.appendChild(hotspotdiv);                */            }                        if( globals.rooms[name].hotspots[hotspot].active == false) {                hotspotdiv.style["pointer-events"] = "none";            } else {                hotspotdiv.style["pointer-events"] = "all";            }                        hotspotdiv.onclick = function() {                if( game.interfaceLocked ) return;                HotspotClick(globals.currentRoom,this.id);            };            hotspotdiv.onmousemove = function(e) {                overHotspot = globals.rooms[globals.currentRoom].hotspots[this.id].description;            };            if( globals.rooms[name].hotspots[hotspot].invisible ) hotspotdiv.style.visibility = 'hidden';            else hotspotdiv.style.visibility = 'visible';        }        DefaultMessageColour();        await rooms[name].enter( globals.rooms[name] );        roomarea.style.display = 'block';    }}function Hotspot(name,values) {    room = LastCreatedRoom;    var defaults = {        description:'Untitled Hotspot',        active:true,        invisible:false,        flag:false,        i:0,        on:false,        svg:name,        name:name,        id:name    };    globals.rooms[room].hotspots[name] = Object.assign(defaults,values);    return rooms[room].hotspots[name] = {};}async function HotspotClick( room, name) {    if(name === undefined) {        name = room;        room = globals.currentRoom;    }    if( game.interfaceLocked ) return;    if( rooms[room] && rooms[room].hotspots[name] ) {        if( rooms[room].hotspots[name].click ) {            DisableInterface();            await WaitSeconds(0.75);            await rooms[room].hotspots[name].click( globals.rooms[room].hotspots[name], globals.rooms[room] );            EnableInterface();        }    }}async function HotspotDisable( room, name) {    if(name === undefined) {        name = room;        room = globals.currentRoom;    }    if( rooms[room] && rooms[room].hotspots[name] ) {        globals.rooms[room].hotspots[name].active = false;        var id = document.getElementById(name);        id.style["pointer-events"] = "none";    }}async function HotspotEnable( room, name) {    if(name === undefined) {        name = room;        room = globals.currentRoom;    }    if( rooms[room] && rooms[room].hotspots[name] ) {        globals.rooms[room].hotspots[name].active = true;        console.log( globals.rooms[room].hotspots[name] );                var id = document.getElementById(name);        if(globals.rooms[room].hotspots[name].svg) id.style["pointer-events"] = "all";        else id.style["pointer-events"] = "auto";    }}async function HotspotHide( room, name) {    if(name === undefined) {        name = room;        room = globals.currentRoom;    }    if( rooms[room] && rooms[room].hotspots[name] ) {        globals.rooms[room].hotspots[name].invisible = true;        var id = document.getElementById(name);        id.style.visibility = "hidden";    }}async function HotspotShow( room, name) {    if(name === undefined) {        name = room;        room = globals.currentRoom;    }    if( rooms[room] && rooms[room].hotspots[name] ) {        globals.rooms[room].hotspots[name].invisible = false;        var id = document.getElementById(name);        id.style.visibility = "visible";    }}var currentMessages = 0;var lastColour = "#fefefe";function SetMessageColour(colour) {    lastColour = gameconsole.style.color;    gameconsole.style.color = colour;}async function ResetMessageColour(colour) {    await WaitMiliseconds(250);    gameconsole.style.color = lastColour;}async function DefaultMessageColour() {    await WaitMiliseconds(250);    SetMessageColour("#fefefe");}function Say(message) {    var promise, ms;    ms = Math.max(1500,message.length*50);    gameconsole.style.display = 'inline-block';    gameconsole.innerHTML = message;    currentMessages++;    promise = new Promise(function(resolve, reject) {        setTimeout(function() {           currentMessages--;            if(currentMessages==0) {                gameconsole.style.display = 'none';                gameconsole.innerHTML = '';            }            resolve('timeout done');        }, ms);    });    return promise;}var currentHotspots = 0;function HotspotSay(room, hotspot, message) {    if(message === undefined) {        message = hotspot;        hotspot = room;        room = globals.currentRoom;    }    var promise, ms;    ms = Math.max(1500,message.length*50);        var hs = document.getElementById(hotspot);    var bounds = hs.getBoundingClientRect();    var x = parseFloat(bounds.x) - main.offsetLeft + parseFloat(bounds.width)/2;    var y = parseFloat(bounds.y) - main.offsetTop + parseFloat(bounds.height)/3;    console.log(bounds);    hover.style.left = x + "px";    h…